{"version":3,"file":"static/js/334.57ddc261.chunk.js","mappings":"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","sources":["components/PersonSidebar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './PersonSidebar.css';\n\nconst WordCloud = ({ persons, onPersonSelect, selectedPerson }) => {\n  const personsList = Object.entries(persons);\n  \n  // Calculate font sizes based on article counts\n  const getPersonStyle = (personName, count, maxCount, minCount) => {\n    const minSize = 12;\n    const maxSize = 28;\n    const normalizedSize = minSize + ((count - minCount) / (maxCount - minCount)) * (maxSize - minSize);\n    \n    return {\n      fontSize: `${normalizedSize}px`,\n      fontWeight: count > (maxCount * 0.7) ? 'bold' : count > (maxCount * 0.4) ? '600' : 'normal',\n      color: `hsl(0, 0%, ${10 + (1 - (count / maxCount)) * 60}%)`,\n      margin: '4px 8px',\n      padding: '4px 8px',\n      borderRadius: '4px',\n      cursor: 'pointer',\n      display: 'inline-block',\n      transition: 'all 0.2s ease',\n      border: selectedPerson === personName ? '2px solid #9ba0a7ff' : '1px solid transparent',\n      backgroundColor: selectedPerson === personName ? 'rgba(0, 123, 255, 0.1)' : 'rgba(0, 0, 0, 0.05)'\n    };\n  };\n\n  if (personsList.length === 0) return null;\n\n  const counts = personsList.map(([_, data]) => data.count);\n  const maxCount = Math.max(...counts);\n  const minCount = Math.min(...counts);\n\n  return (\n    <div className=\"word-cloud-container\">\n      {personsList.map(([personName, personData]) => (\n        <span\n          key={personName}\n          className=\"word-cloud-item\"\n          style={getPersonStyle(personName, personData.count, maxCount, minCount)}\n          onClick={() => onPersonSelect(personName, personData)}\n          title={`${personData.count} articles${personData.total_count > personData.count ? ` (${personData.total_count} total)` : ''}`}\n        >\n          {personName}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nconst PersonSidebar = ({ category, onPersonSelect, selectedPerson, selectedPersonData, onPersonClose }) => {\n  const [persons, setPersons] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (category) {\n      fetchPersonsForCategory(category);\n    }\n  }, [category]);\n\n  const fetchPersonsForCategory = async (categoryName) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/persons/category/${categoryName}`);\n      setPersons(response.data);\n    } catch (error) {\n      console.error('Error fetching persons:', error);\n      setError('Failed to load persons');\n      setPersons({});\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const personsList = Object.entries(persons);\n\n  return (\n    <div className=\"sidebar-left-content person-sidebar\">\n      <div className=\"sidebar-header\">\n        {!selectedPerson ? (\n          <>\n            <h3>Persona dhe ngjarje në {category}</h3>\n          </>\n        ) : (\n          <div className=\"selected-person-header\">\n            <h3>{selectedPerson}</h3>\n            <button className=\"close-button\" onClick={onPersonClose} title=\"Close\">×</button>\n          </div>\n        )}\n      </div>\n\n      {/* If no person selected, show word cloud */}\n      {!selectedPerson ? (\n        loading ? (\n          <div className=\"loading\">Loading persons...</div>\n        ) : error ? (\n          <div className=\"error\">{error}</div>\n        ) : personsList.length === 0 ? (\n          <div className=\"no-persons\">Nuk ka persona</div>\n        ) : (\n          <WordCloud \n            persons={persons} \n            onPersonSelect={onPersonSelect}\n            selectedPerson={selectedPerson}\n          />\n        )\n      ) : (\n        // When a person is selected, show their articles\n        <div className=\"articles-list\">\n          {selectedPersonData.articles.map((article, index) => (\n            <div key={index} className=\"article-item\">\n              <a href={article.link} target=\"_blank\" rel=\"noopener noreferrer\">{article.title}</a>\n              <div className=\"article-meta\">\n                <span>{new URL(article.link).hostname.replace('www.', '')}</span><br />\n                <span>\n                  {new Date(article.published_date)\n                    .toLocaleTimeString(undefined, {\n                      hour: '2-digit',\n                      minute: '2-digit',\n                      hour12: true // keep AM/PM\n                    })}\n                </span>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PersonSidebar;"],"names":["WordCloud","_ref","persons","onPersonSelect","selectedPerson","personsList","Object","entries","getPersonStyle","personName","count","maxCount","minCount","fontSize","concat","fontWeight","color","margin","padding","borderRadius","cursor","display","transition","border","backgroundColor","length","counts","map","_ref2","_","data","Math","max","min","_jsx","className","children","_ref3","personData","style","onClick","title","total_count","_ref4","category","selectedPersonData","onPersonClose","setPersons","useState","loading","setLoading","error","setError","useEffect","fetchPersonsForCategory","async","response","axios","get","process","categoryName","console","_jsxs","_Fragment","articles","article","index","href","link","target","rel","URL","hostname","replace","Date","published_date","toLocaleTimeString","undefined","hour","minute","hour12"],"sourceRoot":""}